// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Modelo para o usuário do sistema
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  role      UserRole  @default(ASSISTENTE) // Cargo do usuário
  sector    UserSector @default(NAO_DEFINIDO) // Setor do usuário
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relações
  createdServiceOrders ServiceOrder[] @relation("CreatedBy")
  assignedServiceOrders ServiceOrder[] @relation("AssignedTo")
}

// Enum para os CARGOS do usuário
enum UserRole {
  ADMIN
  GESTOR
  SUPERVISOR
  COORDENADOR
  COMPRADOR_JUNIOR // NOVO CARGO
  COMPRADOR_PLENO // NOVO CARGO
  COMPRADOR_SENIOR // NOVO CARGO
  COMANDANTE
  IMEDIATO
  OQN
  CHEFE_MAQUINAS
  SUB_CHEFE_MAQUINAS
  OQM
  ASSISTENTE
  AUXILIAR
  ESTAGIARIO
}

// Enum: Setor do usuário
enum UserSector {
  ADMINISTRACAO
  MANUTENCAO
  OPERACAO
  SUPRIMENTOS
  ALMOXARIFADO
  RH
  TI
  TRIPULACAO
  NAO_DEFINIDO
}

// Modelo para a Ordem de Serviço (OS) - Mantido inalterado
model ServiceOrder {
  id                 String         @id @default(uuid())
  title              String
  description        String?
  scopeOfService     String?
  status             OrderStatus    @default(PENDENTE)
  priority           Priority       @default(MEDIA)
  ship               String
  location           String?
  requestedAt        DateTime       @default(now())
  dueDate            DateTime?

  plannedStartDate   DateTime?
  plannedEndDate     DateTime?
  solutionType       SolutionType?
  responsibleCrew    String?
  coordinatorNotes   String?

  contractedCompany  String?
  contractDate       DateTime?
  serviceOrderCost   Float?
  supplierNotes      String?

  reportAttachments  String[]       @default([])

  completedAt        DateTime?

  createdBy          User           @relation("CreatedBy", fields: [createdById], references: [id])
  createdById        String

  assignedTo         User?          @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId       String?
}

// Enums OrderStatus, Priority, SolutionType - Mantidos inalterados
enum OrderStatus {
  PENDENTE
  EM_ANALISE
  APROVADA
  RECUSADA
  PLANEJADA
  AGUARDANDO_SUPRIMENTOS
  CONTRATADA
  EM_EXECUCAO
  AGUARDANDO_PECAS
  CONCLUIDA
  CANCELADA
}

enum Priority {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum SolutionType {
  INTERNA
  TERCEIRIZADA
}