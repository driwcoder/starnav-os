// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Modelo para o usuário do sistema
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  role      UserRole  @default(ASSISTENTE) // Cargo do usuário (ADMIN, GESTOR, COORDENADOR, etc.)
  sector    UserSector @default(NAO_DEFINIDO) // Setor do usuário (MANUTENCAO, SUPRIMENTOS, etc.)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relações
  createdServiceOrders ServiceOrder[] @relation("CreatedBy")
  assignedServiceOrders ServiceOrder[] @relation("AssignedTo")
}

// Enum para os CARGOS do usuário (ex: Gestor, Coordenador, etc.)
enum UserRole {
  ADMIN
  GESTOR
  SUPERVISOR
  COORDENADOR
  COMPRADOR_SERVICO // NOVO CARGO
  COMPRADOR_MATERIAL // NOVO CARGO
  ASSISTENTE
  AUXILIAR
  ESTAGIARIO
}

// NOVO ENUM: Setor do usuário (ex: Manutenção, Suprimentos, etc.)
enum UserSector {
  ADMINISTRACAO
  MANUTENCAO
  OPERACAO
  SUPRIMENTOS
  TRIPULACAO
  ALMOXARIFADO
  RH
  TI // NOVO SETOR
  NAO_DEFINIDO
}

// Modelo para a Ordem de Serviço (OS)
model ServiceOrder {
  id                 String         @id @default(uuid())
  title              String
  description        String?
  scopeOfService     String?
  status             OrderStatus    @default(PENDENTE)
  priority           Priority       @default(MEDIA)
  ship               String
  location           String?
  requestedAt        DateTime       @default(now())
  dueDate            DateTime?

  plannedStartDate   DateTime?
  plannedEndDate     DateTime?
  solutionType       SolutionType?
  responsibleCrew    String?
  coordinatorNotes   String?

  contractedCompany  String?
  contractDate       DateTime?
  serviceOrderCost   Float?
  supplierNotes      String?

  reportAttachments  String[]       @default([])

  completedAt        DateTime?

  createdBy          User           @relation("CreatedBy", fields: [createdById], references: [id])
  createdById        String

  assignedTo         User?          @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId       String?
}

// Enum para os status da Ordem de Serviço
enum OrderStatus {
  PENDENTE
  EM_ANALISE
  APROVADA
  RECUSADA
  PLANEJADA
  AGUARDANDO_SUPRIMENTOS
  CONTRATADA
  EM_EXECUCAO
  AGUARDANDO_PECAS
  CONCLUIDA
  CANCELADA
}

// Enum para as prioridades da Ordem de Serviço
enum Priority {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

// Enum: Tipo de Solução para a OS
enum SolutionType {
  INTERNA
  TERCEIRIZADA
}