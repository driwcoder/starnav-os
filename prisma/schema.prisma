// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Modelo para o usuário do sistema
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  role      UserRole  @default(ASSISTENTE) // Cargo do usuário
  sector    UserSector @default(NAO_DEFINIDO) // Setor do usuário
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relações
  createdServiceOrders ServiceOrder[] @relation("CreatedBy")
  assignedServiceOrders ServiceOrder[] @relation("AssignedTo")

  DashboardPreference DashboardPreference[]
}

// Modelo para a Ordem de Serviço (OS)
model ServiceOrder {
  id                 String         @id @default(uuid())
  title              String
  description        String?
  scopeOfService     String?        // NOVO CAMPO: Escopo de Serviço
  status             OrderStatus    @default(PENDENTE)
  priority           Priority       @default(MEDIA)
  ship               String
  location           String?
  requestedAt        DateTime       @default(now())
  dueDate            DateTime?      // Prazo final para conclusão da OS

  // Novos campos para Planejamento do Atendimento (definidos pelo Coordenador)
  plannedStartDate   DateTime?      // Data/hora programada para início do atendimento
  plannedEndDate     DateTime?      // Data/hora estimada para término do atendimento
  solutionType       SolutionType?  // Tipo de solução: Interna ou Terceirizada
  responsibleCrew    String?        // Nome/identificação da tripulação interna responsável (se INTERNA)
  coordinatorNotes   String?        // Anotações do Coordenador

  // Novos campos para Atendimento de Suprimentos (definidos pelo Comprador)
  contractedCompany  String?        // Nome da empresa terceirizada contratada
  contractDate       DateTime?      // Data da contratação pelo suprimentos
  serviceOrderCost   Float?         // Custo do serviço/contrato
  supplierNotes      String?        // Anotações do Setor de Suprimentos

  // NOVO CAMPO: Para anexar relatórios (URL(s) de arquivos)
  reportAttachments  String[]       @default([]) // Array de strings para URLs de arquivos

  completedAt        DateTime?      // Data e hora da conclusão (se houver)

  // Relações com o modelo User
  createdBy          User           @relation("CreatedBy", fields: [createdById], references: [id])
  createdById        String

  assignedTo         User?          @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId       String?
}

model DashboardPreference {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String?   @unique  // ← novo campo: redundante para facilitar busca
  statuses  String[] @default([]) // Ex: ["PENDENTE", "EM_ANALISE", "CONTRATADA"]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum para os CARGOS do usuário
enum UserRole {
  ADMIN
  GESTOR
  SUPERVISOR
  COORDENADOR
  COMPRADOR_JUNIOR
  COMPRADOR_PLENO
  COMPRADOR_SENIOR
  COMANDANTE
  IMEDIATO
  OQN
  CHEFE_MAQUINAS
  SUB_CHEFE_MAQUINAS
  OQM
  ASSISTENTE
  AUXILIAR
  ESTAGIARIO
}

// Enum: Setor do usuário
enum UserSector {
  ADMINISTRACAO
  MANUTENCAO
  OPERACAO
  SUPRIMENTOS
  ALMOXARIFADO
  RH
  TI
  TRIPULACAO
  NAO_DEFINIDO
}

// Enum para os status da Ordem de Serviço
enum OrderStatus {
  PENDENTE
  EM_ANALISE
  APROVADA
  RECUSADA
  PLANEJADA
  AGUARDANDO_SUPRIMENTOS
  CONTRATADA
  EM_EXECUCAO
  AGUARDANDO_PECAS
  CONCLUIDA
  CANCELADA
}

// Enum para as prioridades da Ordem de Serviço
enum Priority {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

// NOVO ENUM: Tipo de Solução para a OS
enum SolutionType {
  INTERNA
  TERCEIRIZADA
}